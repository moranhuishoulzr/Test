1.线程管理（一）线程的创建和运行 one1
    当全部的线程执行结束时（更具体点，所有非守护线程结束时），Java程序就结束了。如果初始线程（执行main()方法的主线程）运行结束，其他的线程还是会继续执行直到执行完成。但是如果某
    个线程调用System.exit()指示终结程序，那么全部的线程都会结束执行。

2.线程管理（二）获取和设置线程信息 one2
    在Java中，线程只能有这6种中的一种状态： new, runnable, blocked, waiting, time waiting, 或 terminated.

3.线程管理（三）线程的中断 one3
    Java提供中断机制来通知线程表明我们想要结束它。中断机制的特性是线程需要检查是否被中断，而且还可以决定是否响应结束的请求。所以，线程可以忽略中断请求并且继续运行。
    Thread 类还有其他可以检查线程是否被中断的方法。例如，这个静态方法interrupted()能检查正在运行的线程是否被中断。
    isInterrupted()和interrupted() 方法有着很重要的区别。
    第一个不会改变interrupted属性值，但是第二个会设置成false。
    interrupted() 方法是一个静态方法，建议使用isInterrupted()方法。
    在之前提到的，线程是可以忽略中断指令的，但是并这不是我们所期望的行为。

4.线程管理（四）操作线程的中断机制 one4
    如果线程实现的是由复杂的算法分成的一些方法，或者它的方法有递归调用，那么我们可以用更好的机制来控制线程中断。为了这个Java提供了InterruptedException异常。
    当你检测到程序的中断并在run()方法内捕获，你可以抛这个异常。
5.线程的睡眠与恢复 one5
    当 Thread is是睡眠和中断的时候，那方法会立刻抛出InterruptedException异常并不会一直等到睡眠时间过去。睡眠的时候被中断会抛出异常
6.线程管理（六）等待线程的终结 one6
    Thread 类的join() 方法。当前线程调用某个线程的这个方法时，它会暂停当前线程，直到被调用线程执行完成。


